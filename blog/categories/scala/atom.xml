<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | Mastering FP and OO with Scala]]></title>
  <link href="http://blog.jaceklaskowski.pl/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://blog.jaceklaskowski.pl/"/>
  <updated>2015-03-28T19:51:52+01:00</updated>
  <id>http://blog.jaceklaskowski.pl/</id>
  <author>
    <name><![CDATA[Jacek Laskowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Daily Routines to Learn Scala With IntelliJ IDEA]]></title>
    <link href="http://blog.jaceklaskowski.pl/2015/03/28/daily-routines-to-learn-scala-with-intellij-idea.html"/>
    <updated>2015-03-28T12:54:28+01:00</updated>
    <id>http://blog.jaceklaskowski.pl/2015/03/28/daily-routines-to-learn-scala-with-intellij-idea</id>
    <content type="html"><![CDATA[[<img class="left" src="/images/scala-idea-intellij-idea-14-1.png" title="IntelliJ IDEA 14.1 is Here!" >](http://blog.jetbrains.com/idea/2015/03/intellij-idea-14-1-is-here/) So, you&#8217;ve got a moment to learn [Scala](http://www.scala-lang.org/) and have [IntelliJ IDEA](https://www.jetbrains.com/idea/) with [Scala plugin](https://plugins.jetbrains.com/plugin/?id=1347) installed. Your wish is to *maximize* the mental outcome given the time at hand with *little to no effort* to set up a productive working environment. You may even think you may have gotten one, but, unless you&#8217;re doing what I&#8217;m describing here, you&#8217;re actually far from truly having it. I&#8217;m asking you to go *the extra mile*!

In this blog post I&#8217;m introducing you to two modes in the recently-shipped [IntelliJ IDEA 14.1](http://blog.jetbrains.com/idea/2015/03/intellij-idea-14-1-is-here/) &#8211; **Full Screen** and **Distraction Free** modes &#8211; and the few keystrokes I use in the development environment to have a comfortable place to learn Scala. I&#8217;m sure you&#8217;ll have found few ideas to improve your way into your own personal Scala nirvana.

Let&#8217;s go minimalistic, full screen, distraction-free, mouse- and touchpad-less!

You may find the blog post [What to Check Out in Scala Plugin 1.4.x for IntelliJ IDEA 14 & 14.1](http://blog.jetbrains.com/scala/2015/03/26/what-to-check-out-in-scala-plugin-1-4-x-for-intellij-idea-14-14-1/) helpful, too.

*Side note* It came as a complete surprise to me to have noticed that I&#8217;ve been writing the blog post exactly a month after the last one.

<!-- more -->

## Why I&#8217;m using IntelliJ IDEA to learn Scala?

I&#8217;m using IntelliJ IDEA daily.

I begin a day switching to the desktop where the IDE awaits my attention and keep it open (until a mandatory reboot following a system update). I was using other IDEs &#8211; NetBeans IDE or Eclipse IDE &#8211; in the past to develop applications in Java or Java EE, but things have changed since I switched focus on Scala entirely.

The reason for the switch was to master the Scala language not the other available IDEs, and given IntelliJ IDEA have always been receiving positive marks it&#8217;s with me nowadays. When I need a full-blown IDE, it&#8217;s IntelliJ IDEA with the Scala plugin. Period.

There&#8217;s another tool that supports learning Scala beautifully &#8211; **Scala REPL**. However it&#8217;s often too rudimentary and limiting, for quick rendezvous I prefer it with Sublime Text 3 and sbt. For more advanced sessions nothing beats the beloved IDE - IntelliJ IDEA.

I think it was [Tomasz Nurkiewicz](http://www.nurkiewicz.com/) &#8211; [an IntelliJ IDEA expert](http://blog.jetbrains.com/idea/2014/05/annotated-java-monthly-april-2014/) &#8211; who first showed the beauty of using IntelliJ IDEA mouse- and touchpad-less. Thanks Tomek!

## Minimalistic workspace

[I remember the tweet from Adrian Gruntkowski](https://twitter.com/adrgrunt/status/552479034031239168) very well when the need to go minimalistic was first planted in my head. Adrian mentioned a user guide to set up a minimalistic workspace in IntelliJ IDEA (though it was for CursiveClojure) and the story began.

<img class="center" src="/images/scala-idea-tweet-minimalistic-workspace.png" title="Adrian mentions minimalistic workspace" >

It took me a while to get used to it, but it was worth it! I just needed a mixture of [Sublime Text 3](http://www.sublimetext.com/3) and IntelliJ IDEA as the Scala development environment and think I&#8217;ve found mine already.

## A day with Scala and IntelliJ IDEA

Be warned that I&#8217;m working on Mac OS X with `Mac OS X 10.5+` keymap so your milleage may vary.

The blog post assumes you&#8217;ve got a Scala project imported or created from scratch already. I don&#8217;t bother explaining how to do it. In either case, IntelliJ IDEA should open with a Scala project so switching between files makes sense.

### Minimalistic IntelliJ IDEA

Follow [CursiveClojure UI](https://cursiveclojure.com/userguide/ui.html) to have a minimalistic, clutter-free workspace. It&#8217;s a good start and boils down to turning off the toolbars, deselecting Toolbar and Navigation Bars in the View menu and finally disabling the Editor Tabs. That&#8217;s a very good start.

Start by pressing `Cmd + Ctrl + F` to enter full screen.

You should have the IDE looked like as in the following screenshot.

<img class="center" src="/images/scala-idea-minimalistic-workspace.png" title="Minimalistic workspace following CursiveClojure UI" >

Press `Shift` key twice to open **Search everywhere** popup.

<img class="center" src="/images/scala-idea-search-action-popup.png" title="Search action popup" >

You may also want to use `Cmd + Shift + A` to search for actions only.

<img class="center" src="/images/scala-idea-search-actions-only.png" title="Search actions only popup" >

Type in **pre mod** or (better) **preMod** to execute **Enter Presentation Mode** action. In IDEA 14.1 there&#8217;s far more productive mode - **Distraction Free Mode** so type in **distMod** instead.

<img class="center" src="/images/scala-idea-search-action-enter-distration-free-mode.png" title="Enter Distraction Free Mode" >

Either way &#8211; Presentation or Distraction mode &#8211; you&#8217;ve got a clean desk and should concentrate on Scala much easier (with the goodies of IntelliJ IDEA at your fingertips).

Following the advice in the empty workspace of IntelliJ IDEA, use `Cmd + E` to switch between files or `Cmd + Shift + E` to switch between files that were recently edited.

<img class="center" src="/images/scala-idea-recently-edited-files.png" title="Recently Edited Files popup" >

Use `Cmd + O` to open traits or classes. Use `Cmd + Shift + O` to open any file like `build.sbt` or project resources.

<img class="center" src="/images/scala-idea-enter-file-name-build-sbt.png" title="Enter file name popup" >

And the last but not least, install [BashSupport plugin](https://plugins.jetbrains.com/plugin/4230) to have a fully-supported terminal inside IntelliJ IDEA. Use `Alt + F12` to open a terminal session. I use it to have sbt shell open for `~ test` to have the tests executed every time the main and test sources change.

<img class="center" src="/images/scala-idea-terminal-window-sbt-test.png" title="Terminal window with sbt test" >

I use the terminal to open Scala REPL when I need to try out a new API.

<img class="center" src="/images/scala-idea-terminal-window-scala-repl.png" title="Terminal window with Scala REPL" >

There are also `Cmd + KeyUp` to select files from other directories in a project, or just switch to Project view with `Cmd + 1`. You could use `Alt + F1` to select the target to view the currently open file.

<img class="center" src="/images/scala-idea-change-directory-cmd-keyup.png" title="Cmd + KeyUp" >

## Summary

There are plenty of ways and tools to help you learn Scala in a pleasant environment. I&#8217;ve been using Sublime Text 3 and sbt for quite some time, and found myself very productive with this combo. In my case, though, *enough* turned out to be *lazy to learn more advanced developer tools*, i.e. IntelliJ IDEA.

Once I switched to IntelliJ IDEA and started using the features like Full Screen and Distraction Free modes with proper keystrokes, it became the development environment of choice to get full steam ahead into Scala.

[There ain&#8217;t no such thing as a free lunch](http://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch) and it does take time to hop onto a new tooling and change habits. New things can often be getting into your way until you find them useful. As much as habits can help (speeding things up), they should not rule out others and mark them worse by default. As [Learn, Unlearn And Relearn: How To Stay Current And Get Ahead](http://www.forbes.com/sites/margiewarrell/2014/02/03/learn-unlearn-and-relearn/) says:

> Whatever the reasons, once the basics are covered, many people tend to stick with what they know and avoid situations or challenges where they may mess up or be forced to learn something new, thus creating a safe, secure and comfortable (and confining) world for themselves.

Give the tips from the blog post a try and a month later you will have found they&#8217;re as pleasant as yours. Or bring you even more joy! Let me know how it&#8217;s worked out in the Comments section below.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sbt-dependency-graph for Easier Dependency Management in Sbt]]></title>
    <link href="http://blog.jaceklaskowski.pl/2014/11/29/sbt-dependency-graph-for-easier-dependency-management-in-sbt.html"/>
    <updated>2014-11-29T23:10:06+01:00</updated>
    <id>http://blog.jaceklaskowski.pl/2014/11/29/sbt-dependency-graph-for-easier-dependency-management-in-sbt</id>
    <content type="html"><![CDATA[That's gonna be short and hopefully simple. If you're with [sbt](http://www.scala-sbt.org/) you're going to like [sbt-dependency-graph](https://github.com/jrudolph/sbt-dependency-graph) *plugin to create a dependency graph for your project* very much.

<!-- more -->

Edit `~/.sbt/0.13/plugins/sbt-dependency-graph.sbt` so it looks as follows:

	addSbtPlugin(&#8220;net.virtual-void&#8221; % &#8220;sbt-dependency-graph&#8221; % &#8220;0.7.4&#8221;)

Edit `~/.sbt/0.13/global.sbt` so it looks:

	net.virtualvoid.sbt.graph.Plugin.graphSettings

With these two files, open `sbt` or `activator` and execute `dependencyGraph` (I used [hello-slick-specs2](https://github.com/jaceklaskowski/hello-slick-specs2) project):

	> dependencyGraph
	[info] Updating {file:/Users/jacek/dev/oss/hello-slick-specs2/}hello-slick-specs2&#8230;
	[info] Resolving jline#jline;2.12 &#8230;
	[info] Done updating.
	[info]                             +&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+
	[info]                             |hello-slick-specs2_2.11 [S]|
	[info]                             |          default          |
	[info]                             |            1.0            |
	[info]                             +&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+
	[info]                                    |     |   |    |
	[info]                &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;     |   |    &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-
	[info]                |                         |   &#8212;&#8212;&#8212;&#8212;&#8212;&#8211;               |
	[info]                v                         v                   |               |
	[info]           +&#8212;&#8212;&#8212;+          +&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+          |               |
	[info]           |slf4j-nop|          |  slick_2.11 [S]  |          |               |
	[info]           |org.slf4j|          |com.typesafe.slick|          |               |
	[info]           |  1.7.7  |          |      2.1.0       |          |               |
	[info]           +&#8212;&#8212;&#8212;+          +&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+          |               |
	[info]                |                   |   ||      |             |               |
	[info]      &#8212;&#8212;&#8212;&#8211;                   |   ||      &#8212;&#8212;&#8212;     |               |
	[info]      |  &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-   ||              |     |               |
	[info]      |  |             &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;|              |     |               |
	[info]      |  |             |                 |              |     |               |
	[info]      v  v             v                 v              v     v               v
	[info]  +&#8212;&#8212;&#8212;+ +&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;+ +&#8212;&#8212;&#8212;&#8212;+ +&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+ +&#8212;&#8212;&#8212;&#8212;&#8211;+
	[info]  |slf4j-api| |    slf4j-api    | |   config   | |  scala-library   | |      h2      |
	[info]  |org.slf4j| |    org.slf4j    | |com.typesafe| |  org.scala-lang  | |com.h2database|
	[info]  |  1.7.7  | |      1.6.4      | |   1.2.1    | |      2.11.1      | |   1.4.182    |
	[info]  +&#8212;&#8212;&#8212;+ |evicted by: 1.7.7| +&#8212;&#8212;&#8212;&#8212;+ |evicted by: 2.11.4| +&#8212;&#8212;&#8212;&#8212;&#8211;+
	[info]              +&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;+                +&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;+
	[info] Note: The old tree layout is still available by using `dependency-tree`
	[success] Total time: 0 s, completed Nov 29, 2014 11:19:30 PM

Neat, isn&#8217;t it?

You may also want to execute `dependencyGraphMl`:

	> dependencyGraphMl
	[info] Wrote dependency graph to &#8216;/Users/jacek/dev/oss/hello-slick-specs2/target/dependencies-compile.graphml&#8217;
	[success] Total time: 0 s, completed Nov 29, 2014 11:21:46 PM

Install [yEd](http://www.yworks.com/en/products/yfiles/yed/) and open the graph:

	> eval &#8220;open target/dependencies-compile.graphml&#8221; !
	[info] ans: Int = 0

<img src="/images/hello-slick-specs2-yed-graph.png" title="yEd graph of compile dependencies" >

I really wish I&#8217;d known it earlier. It&#8217;d surely have saved me a lot of time.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mistakes Introducing Slick for Database Access Under Play Framework 2.3.4 and 2.4.0-M1]]></title>
    <link href="http://blog.jaceklaskowski.pl/2014/09/12/mistakes-introducing-slick-for-database-access-under-play-framework-2-dot-3-4-and-2-dot-4-0-m1.html"/>
    <updated>2014-09-12T21:47:50+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2014/09/12/mistakes-introducing-slick-for-database-access-under-play-framework-2-dot-3-4-and-2-dot-4-0-m1</id>
    <content type="html"><![CDATA[This is a summary of my attempt to run [Slick](http://slick.typesafe.com/) under [Play Framework](https://www.playframework.com/) **2.3.4** and **2.4.0-M1** that ultimately turned out a quite successful endeavour.

I’m currently using Play’s Anorm and writing the queries myself didn’t seem to be something I much liked. I’ve been seeing Slick has had a good press so it was a no-brainer to pick it as an alternative.

<!-- more -->

## Mistake #1. Hurting myself with cutting edge versions

Reading the documentation at http://slick.typesafe.com/ was not very informative as there was no word about how to embed it in a Play Framework application. There should really be a &#8220;Getting started with Slick and Play Framework&#8221; tutorial since both are part of [The Typesafe Reactive Platform](https://typesafe.com/platform).

I added Slick to `build.sbt` as follows:

    &#8220;com.typesafe.slick&#8221; %% &#8220;slick&#8221; % “2.1.0&#8221;

And then I realised that I’d have had to do:

    Database.forURL(&#8220;jdbc:h2:mem:test1&#8221;, driver = &#8220;org.h2.Driver&#8221;) withSession {
      implicit session =>
      // <- write queries here
    }

but Play Framework gives me:

    DB.withConnection("sayenedb") { implicit c =>
        &#8230;
    }

It was certainly not the way to follow. I needed a solution that would read database configuration from Play&#8217;s.

## Mistake #2. Using play-slick with Play 2.4.0-M1

Time has come to give [play-slick](https://github.com/playframework/play-slick) a serious try. The project aims to make *&#8221;Slick a first-class citizen of Play 2.x.”*

It took me a while to abandon the idea of running play-slick with Play 2.4.0-M1 since [this](https://groups.google.com/d/msg/play-framework/m_bxuqgSKgk/Z4WgfUer19wJ):

> The purpose of this release is to get feedback about the approach to dependency injection that we&#8217;re implementing in Play 2.4.  The old Play plugins mechanism is going to be deprecated.  For a detailed overview of the different styles of DI available in Play 2.4, please read here:

> https://www.playframework.com/documentation/2.4.x/ScalaDependencyInjection
https://www.playframework.com/documentation/2.4.x/ScalaCompileTimeDependencyInjection
https://www.playframework.com/documentation/2.4.x/JavaDependencyInjection

I reported [an issue for play-slick](https://github.com/playframework/play-slick/issues/208) hoping that the developers notice the missing integration point and the support for 2.4 will come&#8230;sooner (?)

## Mistake #3. Using custom db configuration in Play

The application uses no `db.default` configuration in `application.conf` in Play - just a custom one. The result?

    [error] application -

    ! @6jg39b0pk - Internal server error, for (GET) [/tips/wgcategories] ->

    play.api.Configuration$$anon$1: Configuration error[Slick error : jdbc driver not defined in application.conf for db.default.driver key]
         at play.api.Configuration$.play$api$Configuration$$configError(Configuration.scala:94) ~[play_2.11-2.3.4.jar:2.3.4]
         at play.api.Configuration.reportError(Configuration.scala:743) ~[play_2.11-2.3.4.jar:2.3.4]
         at play.api.db.slick.Config$$anonfun$1.apply(Config.scala:64) ~[play-slick_2.11-0.8.0.jar:0.8.0]
         at play.api.db.slick.Config$$anonfun$1.apply(Config.scala:64) ~[play-slick_2.11-0.8.0.jar:0.8.0]
         at scala.Option.getOrElse(Option.scala:120) ~[scala-library-2.11.2.jar:na]

I had to add the following entries to work it around:

    db.default.driver=org.postgresql.Driver
    db.default.url=${?DB_CONN}

`DB_CONN` is the property I set up at command line at Play startup.

Using two datasources required following [Advanced drivers configuration](https://github.com/playframework/play-slick/wiki/ScalaSlickDrivers) and applying the (in)famous Cake pattern.

## Mistake #4. Copying examples to production code - PostgreSQL is case sensitive for field names in quotes

I had the following in my Component:

    def id = column[Int](&#8220;ID&#8221;, O.PrimaryKey, O.AutoInc)

That generated a query with `&#8221;ID&#8221;` in `select` clause that in turn resulted in the following error:

    STATEMENT:  select s13.&#8221;ID&#8221;, s13.&#8221;name&#8221; from “xxx&#8221; s13;
    ERROR:  column s13.ID does not exist at character 8

[As Rene pointed out in his tweet](https://twitter.com/rgielen/status/510501297473462272):

> @jaceklaskowski not true - #PostgreSQL follows SQL standard. Columns names are case insensitive unless created with quotation marks

He was right - changing `ID` to `id` has indeed fixed the issue.

    def id = column[Int](&#8220;id&#8221;, O.PrimaryKey, O.AutoInc)

## Mistake #5. [SI-3664] Explicit case class companion does not extend Function / override toString

There&#8217;s an issue reported against the Scala compiler - [[SI-3664] Explicit case class companion does not extend Function / override toString](https://issues.scala-lang.org/browse/SI-3664) - that stands in a way for the `*` projection, i.e. `def * = &#8230;`, in your table description:

    class Users(tag: Tag) extends Table[User](tag, &#8220;users&#8221;) {
        def id    = column[Int]   (&#8220;id&#8221;, O.PrimaryKey, O.AutoInc)
        def login = column[String](&#8220;login&#8221;)

        def * = (id, login) <> (User.tupled, User.unapply)
    }

For the `Users` class above the Scala compiler fails reporting:

> value tupled is not a member of object model.User

A solution is described in [Mapped Tables](http://slick.typesafe.com/doc/2.1.0/upgrade.html#mapped-tables) section of [UPGRADE GUIDES](http://slick.typesafe.com/doc/2.1.0/upgrade.html) document in the Slick manual:

> Note that `.tupled` is only available for proper Scala functions.  
> When using a case class, the companion object extends the correct function type by default, but only if you do not define the object yourself. In that case you should provide the right supertype manually.

The mapping definition can look as follows:

    class Users(tag: Tag) extends Table[User](tag, &#8220;users&#8221;) {
        def id    = column[Int]   (&#8220;id&#8221;, O.PrimaryKey, O.AutoInc)
        def login = column[String](&#8220;login&#8221;)
    
        def * = (id, login) <> ((User.apply _).tupled, User.unapply)
    }

Note `(User.apply _).tupled`.

## Mistake #6. JodaTime support

For cases where you need to use JodaTime types in Slick you should use [slick-joda-mapper](https://github.com/tototoshi/slick-joda-mapper#slick-joda-mapper).

Else you have to stick to `java.sql.Date`, `java.sql.Time`, `java.sql.Timestamp` as described in [Table Rows](http://slick.typesafe.com/doc/2.1.0/schemas.html?highlight=date#table-rows) in the Slick documentation.

## Summary

Using a non-default configuration is always a kind of minefield. Stay away from it unless you’re adventurous and have enough time and patience to fix issues along the way. You’ve been warned.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Play Framework and AngularJS - Day 1]]></title>
    <link href="http://blog.jaceklaskowski.pl/2014/09/08/getting-started-with-play-framework-and-angularjs-day-1.html"/>
    <updated>2014-09-08T12:42:49+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2014/09/08/getting-started-with-play-framework-and-angularjs-day-1</id>
    <content type="html"><![CDATA[Let's face it -- there are tons of very good tutorials about how to get started with [Play Framework](https://www.playframework.com/) and [AngularJS](https://angularjs.org/) to build modern web applications, and despite the fact there are still quite a few people out there who keep asking me about writing mine. Since writing tutorials is a way to clear up understanding of a topic to me, I found it very compelling to help myself and others using the two - Play and Angular - properly. Well, the *properly* part comes with your comments when I fix the parts that are outdated or plain wrong.

So, here it is. The yet another tutorial series about developing web applications in Play Framework (with Scala) and AngularJS (in JavaScript). Let's get rolling!

**NOTE** It's a work in progress. Watch this space until the note has disappeared and the blog post become feature-complete.

<!-- more -->

## Step 1. Installing Typesafe Activator

Download Typesafe Activator from http://typesafe.com/activator and install it in a directory. Add the directory to `PATH` so you&#8217;ll be able to execute `activator` from any place in your file system without having to use the fully-qualified path.

Execute `activator ui` to open up Activator UI in a browser. Go to http://localhost:8888.

See what&#8217;s available in the UI and once you&#8217;re satisfied, go to the command line where `activator ui` is running and press `Ctrl+C` to stop the UI process.

## Step 2. Creating hello-play-tutorial web application

In a directory of your choice, execute `activator new hello-play-tutorial play-scala` to create a web application using [the Play Scala Seed template](https://typesafe.com/activator/template/play-scala).

**Pro-tip:** Read the output from the command so you learn what you can do with `activator` that I&#8217;m not going to cover in the article.

    ➜  sandbox  activator new hello-play-tutorial play-scala

    Fetching the latest list of templates&#8230;

    OK, application &#8220;hello-play-tutorial&#8221; is being created using the &#8220;play-scala&#8221; template.

    To run &#8220;hello-play-tutorial&#8221; from the command line, &#8220;cd hello-play-tutorial&#8221; then:
    /Users/jacek/sandbox/hello-play-tutorial/activator run

    To run the test for &#8220;hello-play-tutorial&#8221; from the command line, &#8220;cd hello-play-tutorial&#8221; then:
    /Users/jacek/sandbox/hello-play-tutorial/activator test

    To run the Activator UI for &#8220;hello-play-tutorial&#8221; from the command line, &#8220;cd hello-play-tutorial&#8221; then:
    /Users/jacek/sandbox/hello-play-tutorial/activator ui

Change the working directory to `hello-play-tutorial` and run `activator run`. Wait until the message `(Server started, use Ctrl+D to stop and go back to the console&#8230;)` has showed up.

    ➜  sandbox  cd hello-play-tutorial
    ➜  hello-play-tutorial  activator run
    [info] Loading global plugins from /Users/jacek/.sbt/0.13/plugins
    [info] Loading project definition from /Users/jacek/sandbox/hello-play-tutorial/project
    [info] Updating {file:/Users/jacek/sandbox/hello-play-tutorial/project/}hello-play-tutorial-build&#8230;
    [info] Resolving org.fusesource.jansi#jansi;1.4 &#8230;
    [info] Done updating.
    [info] Set current project to hello-play-tutorial (in build file:/Users/jacek/sandbox/hello-play-tutorial/)
    [info] Updating {file:/Users/jacek/sandbox/hello-play-tutorial/}root&#8230;
    [info] Resolving jline#jline;2.11 &#8230;
    [info] Done updating.

    &#8212; (Running the application from SBT, auto-reloading is enabled) &#8212;

    [info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

    (Server started, use Ctrl+D to stop and go back to the console&#8230;)

Visit http://localhost:9000 to open up the web application in a browser.

**Pro-tip:** Read the content of the welcome page so you know what the sample application offers beyond what is included in the article.

## Step 3. (optional) Deploying to a cloud service - CloudBees

According to the official documentation of Play Framework in [Deploying to Cloudbees](https://www.playframework.com/documentation/2.4.x/Deploying-to-CloudBees):

>CloudBees support Play dists natively - with Jenkins and continuous deployment

that is in turn confirmed in the official documentation of CloudBees in [RUN@cloud » Play Framework](https://developer.cloudbees.com/bin/view/RUN/Playframework):

>CloudBees includes first-class support for running Play! applications in the Cloud.

Install [CloudBees SDK](http://developer.cloudbees.com/bin/view/RUN/BeesSDK). On Mac OS X it&#8217;s just that easy as `brew install cloudbees-sdk`.

Start with `bees init` and provide necessary configuration information before moving on to deploying the Play application.

Execute `bees app:create hello-play-tutorial -t play2` to configure the application on CloudBees.

    ➜  hello-play-tutorial git:(master) bees app:create hello-play-tutorial -t play2
    Application: jaceklaskowski/hello-play-tutorial
        url: hello-play-tutorial.jaceklaskowski.eu.cloudbees.net

Create a new git repository under `Repos` in the CloudBees Administrative Console and execute `git init` followed by `git add -am &#8216;Initial commit&#8217;` in the directory.

    ➜  hello-play-tutorial git:(master) git remote add cloudbees https://git.cloudbees.com/jaceklaskowski/hello-play-tutorial.git
    ➜  hello-play-tutorial git:(master) git push &#8211;mirror cloudbees
    Counting objects: 30, done.
    Delta compression using up to 8 threads.
    Compressing objects: 100% (25/25), done.
    Writing objects: 100% (30/30), 1010.69 KiB | 0 bytes/s, done.
    Total 30 (delta 0), reused 0 (delta 0)
    To https://git.cloudbees.com/jaceklaskowski/hello-play-tutorial.git
     * [new branch]      master -> master
    ➜  hello-play-tutorial git:(master) activator clean dist
    &#8230;
    ➜  hello-play-tutorial git:(master) bees app:deploy -t play2 -a hello-play-tutorial target/universal/hello-play-tutorial-1.0-SNAPSHOT.zip
    Deploying application jaceklaskowski/hello-play-tutorial (environment: ): target/universal/hello-play-tutorial-1.0-SNAPSHOT.zip
    Application parameters: {containerType=play2}
    &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;uploaded 25%
    &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;uploaded 50%
    &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;uploaded 75%
    &#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;upload completed
    deploying application to server(s)&#8230;
    Application jaceklaskowski/hello-play-tutorial deployed: http://hello-play-tutorial.jaceklaskowski.eu.cloudbees.net

Access http://hello-play-tutorial.jaceklaskowski.eu.cloudbees.net (mind that yours is different) to see the application deployed and running.

Set up a Jenkins job so the application&#8217;s deployed every `git push cloudbees`.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON in Play Framework With JsValue and Reads]]></title>
    <link href="http://blog.jaceklaskowski.pl/2014/09/02/json-in-play-framework-with-jsvalue-and-reads.html"/>
    <updated>2014-09-02T16:00:00+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2014/09/02/json-in-play-framework-with-jsvalue-and-reads</id>
    <content type="html"><![CDATA[There are many ways to learn [the Scala programming language](http://www.scala-lang.org/) and the vast number of libraries for the language. Mine is to use [sbt](http://www.scala-sbt.org/) console in a customized project with required dependencies that are automatically downloaded by sbt. All (analysing, downloading, setting up CLASSPATH and such) is handled by the tooling itself not me. Share your approach if it appears smarter.

In this installment, I'm presenting a sbt build for learning the JSON API from the [play-json](https://www.playframework.com/documentation/2.4.x/ScalaJson) module in the [play.api.libs.json](https://www.playframework.com/documentation/2.4.x/api/scala/index.html#play.api.libs.json.package) package in [Play Framework 2.4.0-M1](https://www.playframework.com/).

<!-- more -->

It’s a code-mainly version of the article [JSON Macro Inception](https://www.playframework.com/documentation/2.4.x/ScalaJsonInception) from the official documentation of Play Framework.

Start a new activator/sbt project with the following build definition in `build.sbt`:

    scalaVersion := &#8220;2.11.2&#8221;

    val playVersion = &#8220;2.4.0-M1&#8221;

    libraryDependencies += &#8220;com.typesafe.play&#8221; %% &#8220;play-json&#8221; % playVersion

On the command line execute `sbt` and then, while in the sbt shell, `console`.

    > console
    [info] Starting scala interpreter&#8230;
    [info]
    Welcome to Scala version 2.11.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_20).
    Type in expressions to have them evaluated.
    Type :help for more information.

When you see the above (the Java version might be different depending on your configuration), you’re in an interactive development environment - Scala REPL - with play-json library and Scala 2.11.2. The world of JSON’s (almost) yours!

`:pa` (a shortcut for `:paste`) enters paste mode so you can copy and paste entire Scala statements.

    scala> :pa
    // Entering paste mode (ctrl-D to finish)

    import play.api.libs.functional.syntax._
    import play.api.libs.json._

    // Exiting paste mode, now interpreting.

    import play.api.libs.functional.syntax._
    import play.api.libs.json._

    scala> case class Person(name: String, age: Int, lovesChocolate: Boolean)
    defined class Person

    scala> :pa
    // Entering paste mode (ctrl-D to finish)

    implicit val personReads = (
      (__ \ &#8216;name).read[String] and
      (__ \ &#8216;age).read[Int] and
      (__ \ &#8216;lovesChocolate).read[Boolean]
    )(Person)

    // Exiting paste mode, now interpreting.

    personReads: play.api.libs.json.Reads[Person] = play.api.libs.json.Reads$$anon$8@5c2b898d

    scala> val jsonStr = &#8220;&#8221;&#8220;{ &#8220;name&#8221; : &#8220;Jacek&#8221;, &#8220;age&#8221; : 41, &#8220;lovesChocolate&#8221;: true }&#8221;&#8220;&#8221;
    jsonStr: String = { &#8220;name&#8221; : &#8220;Jacek&#8221;, &#8220;age&#8221; : 41, &#8220;lovesChocolate&#8221;: true }

    scala> val json = play.api.libs.json.Json.parse(jsonStr)
    json: play.api.libs.json.JsValue = {&#8220;name&#8221;:&#8221;Jacek&#8221;,&#8221;age&#8221;:41,&#8221;lovesChocolate&#8221;:true}

    scala> val jacek: Person = json
    <console>:18: error: type mismatch;
     found   : play.api.libs.json.JsValue
     required: Person
           val jacek: Person = json
                               ^

    scala> val jacek: Person = json.as[Person]
    jacek: Person = Person(Jacek,41,true)

    scala> implicit val personReads = Json.reads[Person]
    personReads: play.api.libs.json.Reads[Person] = play.api.libs.json.Reads$$anon$8@5e930aa2

With the playground you can play with JSON types in Play however you like. Start with the trait [play.api.libs.json.JsValue](https://www.playframework.com/documentation/2.4.x/api/scala/index.html#play.api.libs.json.JsValue) and then learn what [play.api.libs.json.Reads[T]](https://www.playframework.com/documentation/2.4.x/api/scala/index.html#play.api.libs.json.Reads) offers. They&#8217;re the cornerstone of the JSON API in Play.

The entire code to paste (`:pa` or `:paste` in sbt console) follows. Note the simplifications codenamed **JSON Inception**.

    import play.api.libs.json._

    case class Person(name: String, age: Int, lovesChocolate: Boolean)

    val jsonStr = &#8220;&#8221;&#8220;{ &#8220;name&#8221; : &#8220;Jacek&#8221;, &#8220;age&#8221; : 41, &#8220;lovesChocolate&#8221;: true }&#8221;&#8220;&#8221;

    val json = play.api.libs.json.Json.parse(jsonStr)

    implicit val personReads = Json.reads[Person]

    val jacek: Person = json.as[Person]

Once you’re done, press `Ctrl+D` twice to exit `console` and the sbt shell afterwards.]]></content>
  </entry>
  
</feed>
