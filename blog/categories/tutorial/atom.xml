<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Mastering FP and OO with Scala]]></title>
  <link href="http://blog.jaceklaskowski.pl/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://blog.jaceklaskowski.pl/"/>
  <updated>2014-09-12T21:59:37+02:00</updated>
  <id>http://blog.jaceklaskowski.pl/</id>
  <author>
    <name><![CDATA[Jacek Laskowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Started With Play Framework and AngularJS - Day 1]]></title>
    <link href="http://blog.jaceklaskowski.pl/2014/09/08/getting-started-with-play-framework-and-angularjs-day-1.html"/>
    <updated>2014-09-08T12:42:49+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2014/09/08/getting-started-with-play-framework-and-angularjs-day-1</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s face it &ndash; there are tons of very good tutorials about how to get started with <a href="https://www.playframework.com/">Play Framework</a> and <a href="https://angularjs.org/">AngularJS</a> to build modern web applications, and despite the fact there are still quite a few people out there who keep asking me about writing mine. Since writing tutorials is a way to clear up understanding of a topic to me, I found it very compelling to help myself and others using the two - Play and Angular - properly. Well, the <em>properly</em> part comes with your comments when I fix the parts that are outdated or plain wrong.</p>

<p>So, here it is. The yet another tutorial series about developing web applications in Play Framework (with Scala) and AngularJS (in JavaScript). Let&rsquo;s get rolling!</p>

<p><strong>NOTE</strong> It&rsquo;s a work in progress. Watch this space until the note has disappeared and the blog post become feature-complete.</p>

<!-- more -->


<h2>Step 1. Installing Typesafe Activator</h2>

<p>Download Typesafe Activator from <a href="http://typesafe.com/activator">http://typesafe.com/activator</a> and install it in a directory. Add the directory to <code>PATH</code> so you&rsquo;ll be able to execute <code>activator</code> from any place in your file system without having to use the fully-qualified path.</p>

<p>Execute <code>activator ui</code> to open up Activator UI in a browser. Go to <a href="http://localhost:8888.">http://localhost:8888.</a></p>

<p>See what&rsquo;s available in the UI and once you&rsquo;re satisfied, go to the command line where <code>activator ui</code> is running and press <code>Ctrl+C</code> to stop the UI process.</p>

<h2>Step 2. Creating hello-play-tutorial web application</h2>

<p>In a directory of your choice, execute <code>activator new hello-play-tutorial play-scala</code> to create a web application using <a href="https://typesafe.com/activator/template/play-scala">the Play Scala Seed template</a>.</p>

<p><strong>Pro-tip:</strong> Read the output from the command so you learn what you can do with <code>activator</code> that I&rsquo;m not going to cover in the article.</p>

<pre><code>➜  sandbox  activator new hello-play-tutorial play-scala

Fetching the latest list of templates...

OK, application "hello-play-tutorial" is being created using the "play-scala" template.

To run "hello-play-tutorial" from the command line, "cd hello-play-tutorial" then:
/Users/jacek/sandbox/hello-play-tutorial/activator run

To run the test for "hello-play-tutorial" from the command line, "cd hello-play-tutorial" then:
/Users/jacek/sandbox/hello-play-tutorial/activator test

To run the Activator UI for "hello-play-tutorial" from the command line, "cd hello-play-tutorial" then:
/Users/jacek/sandbox/hello-play-tutorial/activator ui
</code></pre>

<p>Change the working directory to <code>hello-play-tutorial</code> and run <code>activator run</code>. Wait until the message <code>(Server started, use Ctrl+D to stop and go back to the console...)</code> has showed up.</p>

<pre><code>➜  sandbox  cd hello-play-tutorial
➜  hello-play-tutorial  activator run
[info] Loading global plugins from /Users/jacek/.sbt/0.13/plugins
[info] Loading project definition from /Users/jacek/sandbox/hello-play-tutorial/project
[info] Updating {file:/Users/jacek/sandbox/hello-play-tutorial/project/}hello-play-tutorial-build...
[info] Resolving org.fusesource.jansi#jansi;1.4 ...
[info] Done updating.
[info] Set current project to hello-play-tutorial (in build file:/Users/jacek/sandbox/hello-play-tutorial/)
[info] Updating {file:/Users/jacek/sandbox/hello-play-tutorial/}root...
[info] Resolving jline#jline;2.11 ...
[info] Done updating.

--- (Running the application from SBT, auto-reloading is enabled) ---

[info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

(Server started, use Ctrl+D to stop and go back to the console...)
</code></pre>

<p>Visit <a href="http://localhost:9000">http://localhost:9000</a> to open up the web application in a browser.</p>

<p><strong>Pro-tip:</strong> Read the content of the welcome page so you know what the sample application offers beyond what is included in the article.</p>

<h2>Step 3. (optional) Deploying to a cloud service - CloudBees</h2>

<p>According to the official documentation of Play Framework in <a href="https://www.playframework.com/documentation/2.4.x/Deploying-to-CloudBees">Deploying to Cloudbees</a>:</p>

<blockquote><p>CloudBees support Play dists natively - with Jenkins and continuous deployment</p></blockquote>

<p>that is in turn confirmed in the official documentation of CloudBees in <a href="https://developer.cloudbees.com/bin/view/RUN/Playframework">RUN@cloud » Play Framework</a>:</p>

<blockquote><p>CloudBees includes first-class support for running Play! applications in the Cloud.</p></blockquote>

<p>Install <a href="http://developer.cloudbees.com/bin/view/RUN/BeesSDK">CloudBees SDK</a>. On Mac OS X it&rsquo;s just that easy as <code>brew install cloudbees-sdk</code>.</p>

<p>Start with <code>bees init</code> and provide necessary configuration information before moving on to deploying the Play application.</p>

<p>Execute <code>bees app:create hello-play-tutorial -t play2</code> to configure the application on CloudBees.</p>

<pre><code>➜  hello-play-tutorial git:(master) bees app:create hello-play-tutorial -t play2
Application: jaceklaskowski/hello-play-tutorial
    url: hello-play-tutorial.jaceklaskowski.eu.cloudbees.net
</code></pre>

<p>Create a new git repository under <code>Repos</code> in the CloudBees Administrative Console and execute <code>git init</code> followed by <code>git add -am 'Initial commit'</code> in the directory.</p>

<pre><code>➜  hello-play-tutorial git:(master) git remote add cloudbees https://git.cloudbees.com/jaceklaskowski/hello-play-tutorial.git
➜  hello-play-tutorial git:(master) git push --mirror cloudbees
Counting objects: 30, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (25/25), done.
Writing objects: 100% (30/30), 1010.69 KiB | 0 bytes/s, done.
Total 30 (delta 0), reused 0 (delta 0)
To https://git.cloudbees.com/jaceklaskowski/hello-play-tutorial.git
 * [new branch]      master -&gt; master
➜  hello-play-tutorial git:(master) activator clean dist
...
➜  hello-play-tutorial git:(master) bees app:deploy -t play2 -a hello-play-tutorial target/universal/hello-play-tutorial-1.0-SNAPSHOT.zip
Deploying application jaceklaskowski/hello-play-tutorial (environment: ): target/universal/hello-play-tutorial-1.0-SNAPSHOT.zip
Application parameters: {containerType=play2}
........................uploaded 25%
........................uploaded 50%
........................uploaded 75%
........................upload completed
deploying application to server(s)...
Application jaceklaskowski/hello-play-tutorial deployed: http://hello-play-tutorial.jaceklaskowski.eu.cloudbees.net
</code></pre>

<p>Access <a href="http://hello-play-tutorial.jaceklaskowski.eu.cloudbees.net">http://hello-play-tutorial.jaceklaskowski.eu.cloudbees.net</a> (mind that yours is different) to see the application deployed and running.</p>

<p>Set up a Jenkins job so the application&rsquo;s deployed every <code>git push cloudbees</code>.</p>
]]></content>
  </entry>
  
</feed>
