<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Mastering FP and OO with Scala]]></title>
  <link href="http://blog.jaceklaskowski.pl/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.jaceklaskowski.pl/"/>
  <updated>2015-07-25T00:07:45+02:00</updated>
  <id>http://blog.jaceklaskowski.pl/</id>
  <author>
    <name><![CDATA[Jacek Laskowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker Your Scala Web Application (Play Framework)]]></title>
    <link href="http://blog.jaceklaskowski.pl/2015/07/24/docker-your-scala-web-application-play-framework.html"/>
    <updated>2015-07-24T23:03:07+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2015/07/24/docker-your-scala-web-application-play-framework</id>
    <content type="html"><![CDATA[We're experimenting with [Docker](https://www.docker.com/) in the [DeepSense.io](http://deepsense.io/) project. There might be a case or two in the other Scala company in Warsaw - [HCore](http://www.hcore.com/). I've also been noticing interest in using Docker in Scala projects in [Javeo](http://www.javeo.eu/) where the [Warsaw Scala Enthusiasts](http://www.meetup.com/WarszawScaLa/) meetups are taking place. The Docker space seems very hot for Scala developers in Warsaw, Poland. And these companies *are* hiring Scala developers!

I didn't know deploying Scala web applications might be so easy until the very recent Warsaw Scala Enthusiasts meetup when [Rafal Krzewski](http://www.meetup.com/WarszawScaLa/members/95521122/) introduced me to one of the two [sbt](http://www.scala-sbt.org/) plugins for Docker -  [sbt-native-packager](http://www.scala-sbt.org/sbt-native-packager/) (the other is [sbt-docker](https://github.com/marcuslonnberg/sbt-docker) that they say is even better).

The blog post shows how easy it is to use Docker as a means of deploying Scala web applications using Play Framework (that actually uses sbt-native-packager under the covers).

<!-- more -->

## Creating Play Framework web application

Create a new web application using Typesafe Activator tool using `activator new` command:

    ➜  docker-playground  activator new play-dockerized play-scala

    Fetching the latest list of templates...

    OK, application "play-dockerized" is being created using the "play-scala" template.

    To run "play-dockerized" from the command line, "cd play-dockerized" then:
    /Users/jacek/dev/sandbox/docker-playground/play-dockerized/activator run

    To run the test for "play-dockerized" from the command line, "cd play-dockerized" then:
    /Users/jacek/dev/sandbox/docker-playground/play-dockerized/activator test

    To run the Activator UI for "play-dockerized" from the command line, "cd play-dockerized" then:
    /Users/jacek/dev/sandbox/docker-playground/play-dockerized/activator ui

`cd` the `play-dockerized` directory and execute `sbt run` to start the application:

    ➜  play-dockerized  sbt run
    [info] Loading global plugins from /Users/jacek/.sbt/0.13/plugins
    [info] Updating {file:/Users/jacek/.sbt/0.13/plugins/}global-plugins...
    [info] Resolving org.fusesource.jansi#jansi;1.4 ...
    [info] Done updating.
    [info] Loading project definition from /Users/jacek/dev/sandbox/docker-playground/play-dockerized/project
    [info] Updating {file:/Users/jacek/dev/sandbox/docker-playground/play-dockerized/project/}play-dockerized-build...
    [info] Resolving org.fusesource.jansi#jansi;1.4 ...
    [info] Done updating.
    [info] Set current project to play-dockerized (in build file:/Users/jacek/dev/sandbox/docker-playground/play-dockerized/)
    [info] Updating {file:/Users/jacek/dev/sandbox/docker-playground/play-dockerized/}root...
    [info] Resolving jline#jline;2.12.1 ...
    [info] Done updating.

    --- (Running the application, auto-reloading is enabled) ---

    [info] p.a.l.c.ActorSystemProvider - Starting application default Akka system: application
    [info] p.c.s.NettyServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

    (Server started, use Ctrl+D to stop and go back to the console...)

You should now be able to access http://localhost:9000. It's a vanilla **Play Framework 2.4.2** web application.

<img class="left" src="/images/docker-play-youre-using-play-2-4-2.png" title="Play Framework's default welcome page" >

## Publishing Docker image - `docker:publishLocal`

Play comes with **sbt-native-packager** plugin so stop the previous command (using Ctrl+D) and execute `sbt docker:publishLocal`:

    ➜  play-dockerized  sbt docker:publishLocal
    ...
    [info] Digest: sha256:66638b21de4b16af589f54cbd3e2698919efd529583b732a593613f35e813f0b
    [info] Status: Downloaded newer image for java:latest
    [info]  ---> 49ebfec495e1
    [info] Step 1 : WORKDIR /opt/docker
    [info]  ---> Running in ac01dbacaf66
    [info]  ---> 271ea5c0bd1e
    [info] Removing intermediate container ac01dbacaf66
    [info] Step 2 : ADD opt /opt
    [info]  ---> 9c423c2d2f0c
    [info] Removing intermediate container 3087077a2680
    [info] Step 3 : RUN chown -R daemon:daemon .
    [info]  ---> Running in bd40460a5e7d
    [info]  ---> aeec9392fc83
    [info] Removing intermediate container bd40460a5e7d
    [info] Step 4 : USER daemon
    [info]  ---> Running in 461907ca0474
    [info]  ---> 4f0ad20b6a7f
    [info] Removing intermediate container 461907ca0474
    [info] Step 5 : ENTRYPOINT bin/play-dockerized
    [info]  ---> Running in 09aa91f09bc5
    [info]  ---> 7f2afe7c4918
    [info] Removing intermediate container 09aa91f09bc5
    [info] Step 6 : CMD
    [info]  ---> Running in 99c12a3604a3
    [info]  ---> 617942a5bc6f
    [info] Removing intermediate container 99c12a3604a3
    [info] Successfully built 617942a5bc6f
    [info] Built image play-dockerized:1.0-SNAPSHOT
    [success] Total time: 101 s, completed Jul 23, 2015 8:31:18 AM

That was the exact moment when I realized how clever the sbt-native-packager plugin is to leverage well-known `publishLocal` task to publish to Docker repository (that's merely scoped to `docker` to change the way it works).

You've just created a brand new Docker image `play-dockerized:1.0-SNAPSHOT`. Use `docker images` command to check it out:

    ➜  play-dockerized  docker images
    REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
    play-dockerized     1.0-SNAPSHOT        617942a5bc6f        2 minutes ago       892.7 MB

## Docker my time!

You can start a container off the `play-dockerized` image using `docker run` command:

    ➜  play-dockerized  docker run --name play-8080 -p 8080:9000 play-dockerized:1.0-SNAPSHOT
    [info] - play.api.libs.concurrent.ActorSystemProvider - Starting application default Akka system: application
    [info] - play.api.Play - Application started (Prod)
    [info] - play.core.server.NettyServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

The other command line options for `docker run` are `-p` to expose port `9000` outside Docker's virtual network (that's locally available as `8080`) and `--name` to give the container a friendly name (instead of relying on a cryptic hash).

<img class="left" src="/images/docker-play-new-app-ready.png" title="Play Framework inside Docker" >

In another terminal execute `docker ps` to see the container running:

    ➜  play-dockerized  docker ps -a
    CONTAINER ID        IMAGE                          COMMAND                CREATED             STATUS              PORTS                    NAMES
    511ca96e64a4        play-dockerized:1.0-SNAPSHOT   "bin/play-dockerized   10 minutes ago      Up 5 seconds        0.0.0.0:8080->9000/tcp   play-8080

Stop the container with `docker stop play-8080`. The Play Framework web app is no longer accessible. To start it again, execute `docker start play-8080`.

## Summary

It's so easy to have a Docker image of a Play Framework/Scala web application that I hardly believe I could have lived without using it for so long. Once an application becomes a Docker image you can use the other commands to play with it, mainly to deploy the image to any environment to have a consistent and exact environment. Love it so much now. And you can deploy the image to [Docker Hub](https://hub.docker.com/) (similarly how you publish the sources of your excellent applications to GitHub).

Let me know what you think about the topic of the blog post in the [Comments](#disqus_thread) section below or contact me at jacek@japila.pl. Follow the author as [@jaceklaskowski](https://twitter.com/jaceklaskowski) on Twitter, too.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Kafka on Docker]]></title>
    <link href="http://blog.jaceklaskowski.pl/2015/07/14/apache-kafka-on-docker.html"/>
    <updated>2015-07-14T20:59:33+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2015/07/14/apache-kafka-on-docker</id>
    <content type="html"><![CDATA[[<img class="left" src="/images/kafka_logo.png" title="Apache Kafka" >](http://kafka.apache.org/)

[Apache Kafka](http://kafka.apache.org/) has always been high on my list of things to explore, but since there are quite a few things high on my list, Kafka couldn't actually make it to the very top. Until just recently, when I was asked to give **the broker** a try and see whether or not it meets a project's needs. Two projects, to be honest. You should see my face when I heard it.

[I compiled Apache Kafka from the sources](https://github.com/apache/kafka#apache-kafka), connected it to [Spark Streaming](https://spark.apache.org/streaming/) and even attempted to answer few questions on StackOverflow ([How to use Kafka in Flink using Scala?](http://stackoverflow.com/q/31391782/1305344) and [How to monitor Kafka broker using jmxtrans?](http://stackoverflow.com/q/31344222/1305344)), not to mention reading tons of articles and watching videos about the tool. I developed pretty strong confidence what use cases are the sweet spot for Apache Kafka.

With the team in [Codilime](http://www.codilime.com/) I'm developing [DeepSense.io](http://deepsense.io/) platform where we have just used [Ansible](http://www.ansible.com/home) to automate deployment. We've also been evaluating [Docker](https://www.docker.com/) and/or [Vagrant](https://www.vagrantup.com/). All to ease the deployment of DeepSense.io.

That's the moment when these two needs converged - exploring Apache Kafka and Docker (among the other tools) for three separate projects! Amazing, isn't it? I could finally explore how Docker might ease exploration of products and deployment. I knew Docker could ease my developer life, but it's only now when I really saw it. I would now *dockerize* everything. When I was told about the images [wurstmeister/kafka](https://registry.hub.docker.com/u/wurstmeister/kafka/) and [wurstmeister/zookeeper](https://registry.hub.docker.com/u/wurstmeister/zookeeper/) I couldn't have been happier. Running Apache Kafka and using Docker finally became a no-brainer and such a pleasant experience.

I then thought I'd share the love so it's not only mine and others could benefit from it, too.

<!-- more -->

Since I'm on **Mac OS X** the steps to run Apache Kafka using Docker rely on [boot2docker](http://boot2docker.io/) - *a Lightweight Linux for Docker* for platforms that don't natively support Docker - aforementioned Mac OS X and Windows.

You're going to use the images [wurstmeister/kafka](https://registry.hub.docker.com/u/wurstmeister/kafka/) and [wurstmeister/zookeeper](https://registry.hub.docker.com/u/wurstmeister/zookeeper/).

You can run containers off the images in background or foreground. Depending on you Unix skills, it means one or two terminals. Let's use two terminals for each server - Apache Kafka and Apache Zookeeper. I'm going to explain the role of Apache Zookeeper in another blog post.

Here come the steps to run Apache Kafka using Docker. It's assumed you've got `boot2docker` and `docker` tools installed.

    ➜  ~  boot2docker version
    Boot2Docker-cli version: v1.7.1
    Git commit: 8fdc6f5

    ➜  ~  docker --version
    Docker version 1.7.1, build 786b29d

I'm a big fan of [homebrew](http://brew.sh/) and highly recommend it to anyone using Mac OS X. Plenty of ready-to-use packages are just `brew install` away, docker and boot2docker including.

## Running Kafka on two Docker images

1. (Mac OS X and Windows users only) Execute `boot2docker up` to start the tiny Linux core on Mac OS.

        ➜  ~  boot2docker up
        Waiting for VM and Docker daemon to start...
        .o
        Started.
        Writing /Users/jacek/.boot2docker/certs/boot2docker-vm/ca.pem
        Writing /Users/jacek/.boot2docker/certs/boot2docker-vm/cert.pem
        Writing /Users/jacek/.boot2docker/certs/boot2docker-vm/key.pem

        To connect the Docker client to the Docker daemon, please set:
            export DOCKER_HOST=tcp://192.168.59.104:2376
            export DOCKER_CERT_PATH=/Users/jacek/.boot2docker/certs/boot2docker-vm
            export DOCKER_TLS_VERIFY=1

1. (Mac OS X and Windows users only) Execute `$(boot2docker shellinit)` to have the terminal set up and let `docker` know where the tiny Linux core is running (via `boot2docker`). You have to do the step in any terminal you open to work with Docker so the `export`s above are set. Should you face communication issues with `docker` commands, remember the step.

       ➜  ~  $(boot2docker shellinit)
       Writing /Users/jacek/.boot2docker/certs/boot2docker-vm/ca.pem
       Writing /Users/jacek/.boot2docker/certs/boot2docker-vm/cert.pem
       Writing /Users/jacek/.boot2docker/certs/boot2docker-vm/key.pem

1. Run `docker ps` to verify the terminal is configured properly for Docker.

       ➜  ~  docker ps
       CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

    No containers are running at this time. It's going to change soon once you start the containers for Zookeeper first and then Kafka.

1. [Create an account on Docker Hub](https://hub.docker.com/u/jaceklaskowski/) and execute `docker login` to store the credentials. With the step you don't have to repeat them for `docker pull` to pull images off the public hub of Docker images. Think of the Docker Hub as the GitHub for Docker images. Refer to the documentation [Using the Docker Hub](http://docs.docker.com/docker-hub/userguide/) for more up-to-date information.

1. Run `docker pull wurstmeister/zookeeper` to pull the Zookeeper image off Docker Hub (might take a few minutes to download):

       ➜  ~  docker pull wurstmeister/zookeeper
       Pulling repository wurstmeister/zookeeper
       a3075a3d32da: Download complete
       ...
       840840289a0d: Download complete
       e7381f1a45cf: Download complete
       5a6fc057f418: Download complete
       Status: Downloaded newer image for wurstmeister/zookeeper:latest

   You will see hashes of respective layers printed out to the console. It's expected.

1. Execute `docker pull wurstmeister/kafka` to pull the Kafka image off Docker Hub (might take a few minutes to download):

        ➜  ~  docker pull wurstmeister/kafka
        latest: Pulling from wurstmeister/kafka
        428b411c28f0: Pull complete
        ...
        422705fe88c8: Pull complete
        02bb7ca441d8: Pull complete
        0f9a08061516: Pull complete
        24fc32f98556: Already exists
        Digest: sha256:06150c136dcfe6e4fbbf37731a2119ea17a953c75902e52775b5511b3572aa1f
        Status: Downloaded newer image for wurstmeister/kafka:latest

1. Verify that the two images - `wurstmeister/kafka` and `wurstmeister/zookeeper` - are downloaded. From the command line execute `docker images`:

       ➜  ~  docker images
       REPOSITORY               TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
       wurstmeister/kafka       latest              24fc32f98556        3 weeks ago         477.6 MB
       wurstmeister/zookeeper   latest              a3075a3d32da        9 months ago        451 MB

1. You can now execute `docker run --name zookeeper -p 2181 -t wurstmeister/zookeeper` in one terminal to boot Zookeeper up.

    Remember `$(boot2docker shellinit)` if you're on Mac OS X or Windows.

        ➜  ~  docker run --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper
        JMX enabled by default
        Using config: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg
        2015-07-17 19:10:40,419 [myid:] - INFO  [main:QuorumPeerConfig@103] - Reading configuration from: /opt/zookeeper-3.4.6/bin/../conf/zoo.cfg
        ...
        2015-07-17 19:10:40,452 [myid:] - INFO  [main:ZooKeeperServer@773] - maxSessionTimeout set to -1
        2015-07-17 19:10:40,464 [myid:] - INFO  [main:NIOServerCnxnFactory@94] - binding to port 0.0.0.0/0.0.0.0:2181

    This gives you Zookeeper listening to port 2181. Check it out by telneting to it using docker (or boot2docker on MacOS) ip address.

        ➜  ~  telnet `boot2docker ip` 2181
        Trying 192.168.59.103...
        Connected to 192.168.59.103.
        Escape character is '^]'.

1. Execute `docker run --name kafka -e HOST_IP=localhost -e KAFKA_ADVERTISED_PORT=9092 -e KAFKA_BROKER_ID=1 -e ZK=zk -p 9092 --link zookeeper:zk -t wurstmeister/kafka` in another terminal.

    Remember `$(boot2docker shellinit)` if you're on Mac OS X or Windows.

        ➜  ~  docker run --name kafka -e HOST_IP=localhost -e KAFKA_ADVERTISED_PORT=9092 -e KAFKA_BROKER_ID=1 -e ZK=zk -p 9092 --link zookeeper:zk -t wurstmeister/kafka
        [2015-07-17 19:32:35,865] INFO Verifying properties (kafka.utils.VerifiableProperties)
        [2015-07-17 19:32:35,891] INFO Property advertised.port is overridden to 9092 (kafka.utils.VerifiableProperties)
        [2015-07-17 19:32:35,891] INFO Property broker.id is overridden to 1 (kafka.utils.VerifiableProperties)
        ...
        [2015-07-17 19:32:35,894] INFO Property zookeeper.connect is overridden to 172.17.0.5:2181 (kafka.utils.VerifiableProperties)
        [2015-07-17 19:32:35,895] INFO Property zookeeper.connection.timeout.ms is overridden to 6000 (kafka.utils.VerifiableProperties)
        [2015-07-17 19:32:35,924] INFO [Kafka Server 1], starting (kafka.server.KafkaServer)
        [2015-07-17 19:32:35,925] INFO [Kafka Server 1], Connecting to zookeeper on 172.17.0.5:2181 (kafka.server.KafkaServer)
        [2015-07-17 19:32:35,934] INFO Starting ZkClient event thread. (org.I0Itec.zkclient.ZkEventThread)
        [2015-07-17 19:32:35,939] INFO Client environment:zookeeper.version=3.4.6-1569965, built on 02/20/2014 09:09 GMT (org.apache.zookeeper.ZooKeeper)
        ...
        [2015-07-17 19:32:36,093] INFO Awaiting socket connections on 0.0.0.0:9092. (kafka.network.Acceptor)
        [2015-07-17 19:32:36,095] INFO [Socket Server on Broker 1], Started (kafka.network.SocketServer)
        [2015-07-17 19:32:36,146] INFO Will not load MX4J, mx4j-tools.jar is not in the classpath (kafka.utils.Mx4jLoader$)
        [2015-07-17 19:32:36,172] INFO 1 successfully elected as leader (kafka.server.ZookeeperLeaderElector)
        [2015-07-17 19:32:36,253] INFO Registered broker 1 at path /brokers/ids/1 with address 61c359a3136b:9092. (kafka.utils.ZkUtils$)
        [2015-07-17 19:32:36,270] INFO [Kafka Server 1], started (kafka.server.KafkaServer)
        [2015-07-17 19:32:36,318] INFO New leader is 1 (kafka.server.ZookeeperLeaderElector$LeaderChangeListener)

    You're now a happy user of Apache Kafka on your computer using Docker. Check the status of the containers using `docker ps`:

        ➜  ~  docker ps
        CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS              PORTS                                                 NAMES
        0b34a9927004        wurstmeister/kafka       "/bin/sh -c start-ka   2 minutes ago       Up 2 minutes        0.0.0.0:32769->9092/tcp                               kafka
        14fd32558b1c        wurstmeister/zookeeper   "/bin/sh -c '/usr/sb   4 minutes ago       Up 4 minutes        22/tcp, 2888/tcp, 3888/tcp, 0.0.0.0:32768->2181/tcp   zookeeper

1. Once you're done with your journey into Apache Kafka, `docker stop` the containers using `docker stop kafka zookeeper` (or `docker stop $(docker ps -aq)` if the only running containers are `kafka` and `zookeeper`).

        ➜  ~  docker stop kafka zookeeper
        kafka
        zookeeper

    Running `docker ps` shows no running containers afterwards:

        ➜  ~  docker ps
        CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

    There are no running containers since they're stopped now. They are still ready to be booted up again - use `docker ps -a` to see the ready-to-use containers:

        ➜  ~  docker ps -a
        CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                        PORTS               NAMES
        7dde25ff7ec2        wurstmeister/kafka       "/bin/sh -c start-ka   15 hours ago        Exited (137) 16 seconds ago                       kafka
        b7b4b675b9c0        wurstmeister/zookeeper   "/bin/sh -c '/usr/sb   16 hours ago        Exited (137) 5 seconds ago                        zookeeper

1. (Mac OS X and Windows users only) Finally, stop `boot2docker` daemon using `boot2docker down`.

## Summary

With these two docker images - [wurstmeister/kafka](https://registry.hub.docker.com/u/wurstmeister/kafka/) and [wurstmeister/zookeeper](https://registry.hub.docker.com/u/wurstmeister/zookeeper/) - you can run **Apache Kafka** without much changing your local workstation to install it together with the necessary components like Apache ZooKeeper. You don't need to worry about upgrading the software and its dependencies except docker itself (and boot2docker if you're lucky to be on Mac OS). That saves you from spending time on installation and ensures proper functioning of your machine and the software. Moreover, the Docker images could be deployed to other machines and guarantee a consistent environment of the software inside.

Let me know what you think about the topic[^1] of the blog post in the [Comments](#disqus_thread) section below or contact me at jacek@japila.pl. Follow the author as [@jaceklaskowski](https://twitter.com/jaceklaskowski) on Twitter, too.

[^1]: pun intended
]]></content>
  </entry>
  
</feed>
