<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sbt | Mastering FP and OO with Scala]]></title>
  <link href="http://blog.jaceklaskowski.pl/categories/sbt/atom.xml" rel="self"/>
  <link href="http://blog.jaceklaskowski.pl/"/>
  <updated>2015-07-16T01:26:02+02:00</updated>
  <id>http://blog.jaceklaskowski.pl/</id>
  <author>
    <name><![CDATA[Jacek Laskowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using AutoPlugin in Sbt for Common Settings Across Projects in Multi-project Build]]></title>
    <link href="http://blog.jaceklaskowski.pl/2015/04/12/using-autoplugin-in-sbt-for-common-settings-across-projects-in-multi-project-build.html"/>
    <updated>2015-04-12T15:20:45+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2015/04/12/using-autoplugin-in-sbt-for-common-settings-across-projects-in-multi-project-build</id>
    <content type="html"><![CDATA[What a joy to learn all the goodies sbt brings to the table and be given a chance to apply it right away to commercial projects in Scala!

I've recently been assigned to a task to create a solution to share common settings across projects in a [multi-project build](http://www.scala-sbt.org/0.13/tutorial/Multi-Project.html) in a Scala project managed by [sbt](http://www.scala-sbt.org). With the new feature of sbt - [autoplugins](http://www.scala-sbt.org/0.13/docs/Plugins.html) - it was very easy to implement from the day one.

<!-- more -->

## The solution = project/CommonSettingsPlugin.scala

	import sbt._
	import Keys._

	object CommonSettingsPlugin extends AutoPlugin {
	  override def trigger = allRequirements
	  override lazy val projectSettings = Seq(
	    organization  := "io.deepsense",
	    version       := "0.1.0",
	    scalaVersion  := "2.11.6",
	    scalacOptions := Seq(
	      "-unchecked", "-deprecation", "-encoding", "utf8", "-feature",
	      "-language:existentials", "-language:implicitConversions"
	    )
	  )
	}

Since the autoplugin is automatically triggered for all the projects in the multi-project build -- `override def trigger = allRequirements` -- all the projects have `organization`, `version`, `scalaVersion`, `scalacOptions` set. No other work is needed.

Simple and easy, and, what's tracked under another issue, Jenkins should now be able to execute `coverageReport` and `coverageAggregate` without troubles for the project!

As a bonus, you don't have to change anything in your sbt project to leverage the simplicity - just drop the code as `project/CommonSettingsPlugin.scala` and do `show scalaVersion`. From that moment on, all the (sub)projects in your multi-project build should have the same `scalaVersion` (unless you use a separate `build.sbt` for a project and set `scalaVersion` explicitly).

## Lessons learnt

The initial mistake was to create a separate sbt project just to keep the autoplugin's code.

From the very first day of the plugin's life it was so much different from the other projects in the build -- it almost yelled out in pain at me not to place it where it was initially. It was a sbt plugin and as such it only meant to enhance sbt itself (not be a part of the commercial project).

What's even worse, up to the latest version of sbt 0.13.8 all plugins (are doomed to) use Scala 2.10.4 that's an issue for [sbt-scoverage plugin](https://github.com/scoverage/sbt-scoverage) as it kept refusing to work with the version of Scala.

All in all, I seemed reluctant for a long time to have even thought of a better place for the plugin even though I had actually known it.

A few discussions on [gitter on the sbt channel](https://gitter.im/sbt/sbt) made my day after the very helpful and nice people from the channel lent me a helping hand to find the final solution - the autoplugin went under `project` and...my live was so much bright again!

What was later pointed out to me when we discussed the change in the team, the final solution was a mere 24 line removal (!)

<img src="/images/using-autoplugin-patchset-gerrit.png" title="Patchset with AutoPlugin changes" >

It got `+2` from a teammate and has been merged to `master` without much hussle.

p.s. Shhh, the team thinks it was just me to have figured it out myself.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sbt-dependency-graph for Easier Dependency Management in Sbt]]></title>
    <link href="http://blog.jaceklaskowski.pl/2014/11/29/sbt-dependency-graph-for-easier-dependency-management-in-sbt.html"/>
    <updated>2014-11-29T23:10:06+01:00</updated>
    <id>http://blog.jaceklaskowski.pl/2014/11/29/sbt-dependency-graph-for-easier-dependency-management-in-sbt</id>
    <content type="html"><![CDATA[That's gonna be short and hopefully simple. If you're with [sbt](http://www.scala-sbt.org/) you're going to like [sbt-dependency-graph](https://github.com/jrudolph/sbt-dependency-graph) *plugin to create a dependency graph for your project* very much.

<!-- more -->

Edit `~/.sbt/0.13/plugins/sbt-dependency-graph.sbt` so it looks as follows:

	addSbtPlugin("net.virtual-void" % "sbt-dependency-graph" % "0.7.4")

Edit `~/.sbt/0.13/global.sbt` so it looks:

	net.virtualvoid.sbt.graph.Plugin.graphSettings

With these two files, open `sbt` or `activator` and execute `dependencyGraph` (I used [hello-slick-specs2](https://github.com/jaceklaskowski/hello-slick-specs2) project):

	> dependencyGraph
	[info] Updating {file:/Users/jacek/dev/oss/hello-slick-specs2/}hello-slick-specs2...
	[info] Resolving jline#jline;2.12 ...
	[info] Done updating.
	[info]                             +---------------------------+
	[info]                             |hello-slick-specs2_2.11 [S]|
	[info]                             |          default          |
	[info]                             |            1.0            |
	[info]                             +---------------------------+
	[info]                                    |     |   |    |
	[info]                ---------------------     |   |    ----------------------------
	[info]                |                         |   -----------------               |
	[info]                v                         v                   |               |
	[info]           +---------+          +------------------+          |               |
	[info]           |slf4j-nop|          |  slick_2.11 [S]  |          |               |
	[info]           |org.slf4j|          |com.typesafe.slick|          |               |
	[info]           |  1.7.7  |          |      2.1.0       |          |               |
	[info]           +---------+          +------------------+          |               |
	[info]                |                   |   ||      |             |               |
	[info]      -----------                   |   ||      ---------     |               |
	[info]      |  ----------------------------   ||              |     |               |
	[info]      |  |             ------------------|              |     |               |
	[info]      |  |             |                 |              |     |               |
	[info]      v  v             v                 v              v     v               v
	[info]  +---------+ +-----------------+ +------------+ +------------------+ +--------------+
	[info]  |slf4j-api| |    slf4j-api    | |   config   | |  scala-library   | |      h2      |
	[info]  |org.slf4j| |    org.slf4j    | |com.typesafe| |  org.scala-lang  | |com.h2database|
	[info]  |  1.7.7  | |      1.6.4      | |   1.2.1    | |      2.11.1      | |   1.4.182    |
	[info]  +---------+ |evicted by: 1.7.7| +------------+ |evicted by: 2.11.4| +--------------+
	[info]              +-----------------+                +------------------+
	[info] Note: The old tree layout is still available by using `dependency-tree`
	[success] Total time: 0 s, completed Nov 29, 2014 11:19:30 PM

Neat, isn't it?

You may also want to execute `dependencyGraphMl`:

	> dependencyGraphMl
	[info] Wrote dependency graph to '/Users/jacek/dev/oss/hello-slick-specs2/target/dependencies-compile.graphml'
	[success] Total time: 0 s, completed Nov 29, 2014 11:21:46 PM

Install [yEd](http://www.yworks.com/en/products/yfiles/yed/) and open the graph:

	> eval "open target/dependencies-compile.graphml" !
	[info] ans: Int = 0

<img src="/images/hello-slick-specs2-yed-graph.png" title="yEd graph of compile dependencies" >

I really wish I'd known it earlier. It'd surely have saved me a lot of time.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trait Init[Scope] in Sbt]]></title>
    <link href="http://blog.jaceklaskowski.pl/2014/07/22/trait-init-scope-in-sbt.html"/>
    <updated>2014-07-22T13:19:54+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2014/07/22/trait-init-scope-in-sbt</id>
    <content type="html"><![CDATA[It's been my wish to master [Scala](http://scala-lang.org/) recently and since I've been spending more time with [sbt](http://www.scala-sbt.org/) I've made the decision to use one to master the other (in no particular order). There are quite a few sophisticated projects in Scala out there, but sbt is enough for my needs.

In order to pursue my understanding of sbt (and hence Scala itself) I've been reading the sources that honestly keep surprising me so much often. It's almost every minute when I find myself scratching my head to digest a piece of sbt code. It's akin to when I was reading the source code of [Clojure](http://clojure.org/) to learn the language. People can write complicated code and I wouldn't be surprised to hear sbt's sources belong to the category. I don't care, though. I'm fine with the complexity hoping the mental pain brings me closer to master Scala.

Today I picked the trait [sbt.Init](https://github.com/sbt/sbt/blob/0.13/util/collection/src/main/scala/sbt/Settings.scala#L41) believing it'd be an important step in my journey.

**NOTE** It becomes feature-complete when the note disappears. Live with the few mistakes for now. Let me know what you think in the Comments section. The site is on GitHub so pull requests are warmly welcome, too. Thanks!

<!-- more -->

There’s the trait [sbt.Init](https://github.com/sbt/sbt/blob/0.13/util/collection/src/main/scala/sbt/Settings.scala#L41). I don’t really know what its purpose is and I hope to find it out after few Scala snippets. There’s just enough hope to master Scala while pursuing my understanding of sbt with the trait.

## Goal

Create an instance of trait `Init[Scope]`.

## Solution

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val init = new Init[Int] {
</span><span class='line'>  def showFullKey: Show[ScopedKey[_]] = Show { (sk: ScopedKey[_]) =&gt; 
</span><span class='line'>    s"${sk.scope}:${sk.key}...${sk.scopedKey}"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>
Run `sbt` and then execute the command `consoleProject` to open sbt's Scala REPL with all the necessary types of sbt loaded.

## Mental issues encountered

1. I’m far from being able to distinguish easily type parameters, e.g. `Scope`, in parameterised types, e.g. `Init[Scope]`, from types themselves. When I see `Init[Scope]` my Java-trained eyes see `Scope` type within `Init` type and although it doesn’t make sense after a moment that’s my initial thought.

2. The type constructor `Show[ScopedKey[_]]` in the return value type of `showFullKey` is another trait `Show` that comes with `apply` that is supposed to return a `String` instance from `ScopedKey[_]`. But hey, `ScopedKey[_]` is another type constructor, and things get more complex for me again. Happily, `Show` has a companion object with `apply` method. The story ends as `ScopedKey` is a final parameterized case class and the function parameter `f: T => String` in `Show` returns a `String` so I've just merely followed the types and it *happened* to work fine. The Scala compiler happy and so am I.

## Summary

`Show` is a function type (with `apply`) that accepts `T` and returns `String`. In our case, `T` is `ScopedKey[_]` that’s...well...it’s yet to be understood.

## consoleProject in sbt

If you happened to want to see the code in action, execute `sbt consoleProject` and give the following a try:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// (attribute) key that points at Int value
</span><span class='line'>scala&gt; val number = AttributeKey[Int]("number", "number stringified")
</span><span class='line'>number: sbt.AttributeKey[Int] = number
</span><span class='line'> 
</span><span class='line'>scala&gt; val init = new Init[Int] {
</span><span class='line'>     |   def showFullKey: Show[ScopedKey[_]] = Show { (sk: ScopedKey[_]) =&gt;
</span><span class='line'>     |     s"${sk.scope}:${sk.key}...${sk.scopedKey}"
</span><span class='line'>     |   }
</span><span class='line'>     | }
</span><span class='line'>init: sbt.Init[Int] = $anon$1@1f95802
</span><span class='line'> 
</span><span class='line'>scala&gt; val sfk: Show[init.ScopedKey[_]] = init.showFullKey
</span><span class='line'>sfk: sbt.Show[init.ScopedKey[_]] = sbt.Show$$anon$1@7f54be72
</span><span class='line'>
</span><span class='line'>scala&gt; val s = sfk(init.ScopedKey[Int](scope=5, key=number))
</span><span class='line'>s: String = 5:number...ScopedKey(5,number)</span></code></pre></td></tr></table></div></figure>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beginner "Guide" to Sbt 0.13 and IntelliJ IDEA 13]]></title>
    <link href="http://blog.jaceklaskowski.pl/2013/12/07/beginner-guide-to-sbt-0-dot-13-and-intellij-idea-13.html"/>
    <updated>2013-12-07T16:39:37+01:00</updated>
    <id>http://blog.jaceklaskowski.pl/2013/12/07/beginner-guide-to-sbt-0-dot-13-and-intellij-idea-13</id>
    <content type="html"><![CDATA[<img class="left" src="/images/intellij-idea-13-new-logo.png" title="The logo of IntelliJ IDEA 13" > It has not been very long ago when the only way to work with [sbt](http://www.scala-sbt.org/) projects in [IntelliJ IDEA](http://www.jetbrains.com/idea/) was to use the [sbt-idea](https://github.com/mpeltonen/sbt-idea) plugin that aimed at *"creating IntelliJ IDEA project files"*.

[With the recent release of IntelliJ IDEA 13](http://www.jetbrains.com/idea/whatsnew/) (build: 133.193,  released: December 3, 2013) it's no longer true - the version comes with built-in sbt support and the support is available in [the free Community Edition](http://www.jetbrains.com/idea/download/index.html), too.

My recent, rather quite frequent visits on [StackOverflow](http://stackoverflow.com/) have showed that there's one question very often asked - **How to start using sbt with IntelliJ IDEA?** It turns out that the latest version of IntelliJ IDEA 13 squashed it pretty neatly and the built-in sbt support made the question irrelevant.

Unless it changes, the page remains empty[^1]. What a surprise, isn't it? I've always been thinking about writing the best beginner guide and here it is...at long last!

On to querying [StackOverflow's #sbt tag](http://stackoverflow.com/questions/tagged/sbt) for questions about *a* sbt support in IntelliJ IDEA 13.

[^1]: as a kind of placeholder for future tips and tricks]]></content>
  </entry>
  
</feed>
