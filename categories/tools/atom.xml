<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Mastering FP and OO with Scala]]></title>
  <link href="http://blog.jaceklaskowski.pl/categories/tools/atom.xml" rel="self"/>
  <link href="http://blog.jaceklaskowski.pl/"/>
  <updated>2015-07-14T22:23:58+02:00</updated>
  <id>http://blog.jaceklaskowski.pl/</id>
  <author>
    <name><![CDATA[Jacek Laskowski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using AutoPlugin in Sbt for Common Settings Across Projects in Multi-project Build]]></title>
    <link href="http://blog.jaceklaskowski.pl/2015/04/12/using-autoplugin-in-sbt-for-common-settings-across-projects-in-multi-project-build.html"/>
    <updated>2015-04-12T15:20:45+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2015/04/12/using-autoplugin-in-sbt-for-common-settings-across-projects-in-multi-project-build</id>
    <content type="html"><![CDATA[What a joy to learn all the goodies sbt brings to the table and be given a chance to apply it right away to commercial projects in Scala!

I've recently been assigned to a task to create a solution to share common settings across projects in a [multi-project build](http://www.scala-sbt.org/0.13/tutorial/Multi-Project.html) in a Scala project managed by [sbt](http://www.scala-sbt.org). With the new feature of sbt - [autoplugins](http://www.scala-sbt.org/0.13/docs/Plugins.html) - it was very easy to implement from the day one.

<!-- more -->

## The solution = project/CommonSettingsPlugin.scala

	import sbt._
	import Keys._

	object CommonSettingsPlugin extends AutoPlugin {
	  override def trigger = allRequirements
	  override lazy val projectSettings = Seq(
	    organization  := "io.deepsense",
	    version       := "0.1.0",
	    scalaVersion  := "2.11.6",
	    scalacOptions := Seq(
	      "-unchecked", "-deprecation", "-encoding", "utf8", "-feature",
	      "-language:existentials", "-language:implicitConversions"
	    )
	  )
	}

Since the autoplugin is automatically triggered for all the projects in the multi-project build -- `override def trigger = allRequirements` -- all the projects have `organization`, `version`, `scalaVersion`, `scalacOptions` set. No other work is needed.

Simple and easy, and, what's tracked under another issue, Jenkins should now be able to execute `coverageReport` and `coverageAggregate` without troubles for the project!

As a bonus, you don't have to change anything in your sbt project to leverage the simplicity - just drop the code as `project/CommonSettingsPlugin.scala` and do `show scalaVersion`. From that moment on, all the (sub)projects in your multi-project build should have the same `scalaVersion` (unless you use a separate `build.sbt` for a project and set `scalaVersion` explicitly).

## Lessons learnt

The initial mistake was to create a separate sbt project just to keep the autoplugin's code.

From the very first day of the plugin's life it was so much different from the other projects in the build -- it almost yelled out in pain at me not to place it where it was initially. It was a sbt plugin and as such it only meant to enhance sbt itself (not be a part of the commercial project).

What's even worse, up to the latest version of sbt 0.13.8 all plugins (are doomed to) use Scala 2.10.4 that's an issue for [sbt-scoverage plugin](https://github.com/scoverage/sbt-scoverage) as it kept refusing to work with the version of Scala.

All in all, I seemed reluctant for a long time to have even thought of a better place for the plugin even though I had actually known it.

A few discussions on [gitter on the sbt channel](https://gitter.im/sbt/sbt) made my day after the very helpful and nice people from the channel lent me a helping hand to find the final solution - the autoplugin went under `project` and...my live was so much bright again!

What was later pointed out to me when we discussed the change in the team, the final solution was a mere 24 line removal (!)

<img src="/images/using-autoplugin-patchset-gerrit.png" title="Patchset with AutoPlugin changes" >

It got `+2` from a teammate and has been merged to `master` without much hussle.

p.s. Shhh, the team thinks it was just me to have figured it out myself.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Review With Gerrit and Contributing to a Patch Set?]]></title>
    <link href="http://blog.jaceklaskowski.pl/2015/04/05/code-review-with-gerrit-and-contributing-to-a-patchset.html"/>
    <updated>2015-04-05T17:59:41+02:00</updated>
    <id>http://blog.jaceklaskowski.pl/2015/04/05/code-review-with-gerrit-and-contributing-to-a-patchset</id>
    <content type="html"><![CDATA[[<img class="left" src="/images/gerrit-diffy.png" title="Gerrit Code Review" >](https://code.google.com/p/gerrit/)

I'm yet to appreciate [gerrit](https://code.google.com/p/gerrit/) as a code review tool worth to learn (after having heard bad and good stories about its features and how it complements development workflows), but in my new team at [Codilime](http://www.codilime.com/) where we develop...*[a revolutionary machine learning engine enabling your team to use state-of-the-art algorithms in a fraction of time!](http://deepsense.io/)* that's the tool to conduct code reviews.

The blog post presents how I discovered a way to contribute to a patch set with my own changes. Use with caution as I'm not really sure that's how gerrit should be used in a team.

<!-- more -->

## Very (lame) intro to gerrit

From the website of [gerrit](https://code.google.com/p/gerrit/):

> Web based code review and project management for Git based projects.

The take away from it is that it's the tool for **code reviews** for **git** project. You `git push` your changes to `master` early and often -- I'd say it's even earlier and more often than I did following [the github workflow](https://guides.github.com/introduction/flow/) with *pull requests* or [the gitlab workflow](https://about.gitlab.com/2014/09/29/gitlab-flow/) with *merge requests*.

At GitHub and GitLab I usually `git rebase` changes to squash them all into one and send a pull/merge request.

In gerrit, you `git commit --amend` as a way to keep changes under a single code review request. The point is to keep `Change-Id` and you should be fine in a single code review session. Every `git push` following `git commit --amend` with a single `Change-Id` creates a new Patch Set until it's ready to be merged with `master`. These Patch Sets (under a single `Change-Id`) establish a sort of branch from which you send changes for code review.

Once the code looks good, i.e. it's `+1` twice by the team and verified (possibly by Jenkins), it can be submitted to the central git repository - preferably (private) one at GitHub.

## Drafts as branches - not for review

There's a feature of gerrit called [drafts](http://gerrit-documentation.googlecode.com/svn/ReleaseNotes/ReleaseNotes-2.3.html#_drafts) that...*will be for a change that is not meant for review (yet).* It's a good candidate for changes that other developers can contribute to (I might be mistaken here since I'm new to gerrit).

## Contributing to a Patch Set

**DISCLAIMER:** What follows assumes that a patch set in draft status can be considered a branch to develop collaboratively with a few developers. I'm not so sure it's a correct assumption.

<img class="center" src="/images/gerrit-contributing-patchset-5.png" title="Patch Set" >

In gerrit, go to **All > Open** where you see all the available changes for code review. Pick one, preferrably in **Draft** status (but others should work fine, too).

Expand the latest **Patch Set** and select **checkout** tab in **Download**. Copy the `git fetch ... && git checkout FETCH_HEAD` command using the icon on the right (see the screenshot above).

Do your changes and once satisfied `git checkout -b new_branch_name` to create a new branch as `new_branch_name`.

`git add` the changes and **very important** `git commit --amend` them with **Change-Id** untouched. The Change-Id is the way for gerrit to keep track what belongs to what development stream as a new patch set. You may also want to change the author with `git commit --amend --author` to mark the changes as yours.

Push the commit to `origin` (or whatever remote repository you use) with `git push origin <new_branch_name>:refs/drafts/master`. The `git push` command assumes that you're on `master` branch.

You're done!

See [How to change a patchset and push it as a new one?](http://stackoverflow.com/q/24457418/1305344) where the knowledge was initially developed.]]></content>
  </entry>
  
</feed>
